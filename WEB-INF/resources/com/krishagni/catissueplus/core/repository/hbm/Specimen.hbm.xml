<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping auto-import="false">
  <class name="com.krishagni.catissueplus.core.biospecimen.domain.Specimen" table="CATISSUE_SPECIMEN">
    <id name="id" column="IDENTIFIER" type="long">
      <generator class="native">
        <param name="sequence">CATISSUE_SPECIMEN_SEQ</param>
      </generator>
    </id>

    <property name="initialQuantity" column="INITIAL_QUANTITY" />

    <property name="pathologicalStatus" column="PATHOLOGICAL_STATUS" />

    <property name="lineage" column="LINEAGE" />

    <property name="specimenClass" column="SPECIMEN_CLASS" />

    <property name="specimenType" column="SPECIMEN_TYPE" />

    <property name="label" column="LABEL" />

    <property name="isAvailable" column="AVAILABLE" />

    <property name="comment" column="COMMENTS" />

    <property name="activityStatus" column="ACTIVITY_STATUS" />

    <property name="collectionStatus" column="COLLECTION_STATUS" />

    <property name="barcode" column="BARCODE" />

    <property name="createdOn" column="CREATED_ON_DATE" />

    <property name="availableQuantity" column="AVAILABLE_QUANTITY" />

    <property name="tissueSide" type="string" column="TISSUE_SIDE" />
		
    <property name="tissueSite" type="string" column="TISSUE_SITE" />

    <one-to-one
      name="position"
      class="com.krishagni.catissueplus.core.administrative.domain.StorageContainerPosition"
      property-ref="occupyingSpecimen"
      cascade="save-update"/>

    <many-to-one name="parentSpecimen"
      class="com.krishagni.catissueplus.core.biospecimen.domain.Specimen"
      column="PARENT_SPECIMEN_ID" />

    <set name="childCollection" table="CATISSUE_SPECIMEN" inverse="true" cascade="all">
      <key column="PARENT_SPECIMEN_ID"/>
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.Specimen"/>
    </set>

    <many-to-one name="visit"
      class="com.krishagni.catissueplus.core.biospecimen.domain.Visit"
      column="SPECIMEN_COLLECTION_GROUP_ID" />

    <many-to-one name="specimenRequirement"
      class="com.krishagni.catissueplus.core.biospecimen.domain.SpecimenRequirement" 
      column="REQ_SPECIMEN_ID" />

    <set name="externalIdentifierCollection" table="CATISSUE_EXTERNAL_IDENTIFIER" inverse="true" cascade="all-delete-orphan">
      <key column="SPECIMEN_ID"/>
      <one-to-many class="com.krishagni.catissueplus.core.biospecimen.domain.ExternalIdentifier" />
    </set>
    
    <filter name="notDisabledSpecimen" condition="activity_status != 'Disabled'"/>

    <query name="getByLabel">
      from 
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
      where
        s.label = :label
    </query>

    <query name="getParentByVisitAndReq">
      select
        s
      from
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
        join s.visit v
        join s.specimenRequirement sr
        join sr.childSpecimenRequirements csr
      where
        v.id = :visitId and
        csr.id = :srId
    </query>

    <query name="getByIds">
      select
        s
      from
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
      where
        s.id in (:specimenIds) and
        s.activityStatus = 'Active'
    </query>

    <query name="getByLabels">
      select
        s
      from
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
      where
        s.label in (:specimenLabels) and
        s.activityStatus = 'Active'
    </query>

    <query name="getByVisitId">
      select
        s
      from
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
        join s.visit v
      where
        v.id = :visitId and
        v.activityStatus = 'Active' and
        s.activityStatus = 'Active'
    </query>

    <query name="getByVisitName">
      select
        s
      from
        com.krishagni.catissueplus.core.biospecimen.domain.Specimen s
        join s.visit v
      where
        v.name = :visitName and
        v.activityStatus = 'Active' and
        s.activityStatus = 'Active'
    </query>
  </class>
  
  <filter-def name="notDisabledSpecimen"/>
</hibernate-mapping>
